<configuration debug="true" scan="true" scanPeriod="30 seconds" packagingData="false">

    <!--logback 不需要DTD 文件,节点不区分大小写-->

    <!--日志存放路径,windows会将日志存放到当前磁盘 c:/opt/logs/app/myApp.log -->
    <!--日志存放路径,Linux会将日志存放到当前磁盘 /opt/logs/app/myApp.log -->
    <property scope="context" name="APP_NAME" value="gragas"/>
    <property scope="context" name="LOG_FILE_PATH" value="/tmp/logs/${APP_NAME}/" />

    <!--配置输出到控制台-->
    <!-- Appender 有两个属性name 和class可以配置
         name属性指定appender的名称，而class属性指定要实例化的appender类的完全限定名称
        <appender>元素可以包含零个或一个<layout>元素，零个或多个<encoder>元素以及零个或多个<filter>元素。 -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <!--配置控制台输出格式，由于是控制台，我这里调成了日志高亮显示 -->
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %highlight(%-5level) %cyan(%logger{36}) - %m%n</pattern>
        </encoder>
    </appender>

    <appender name="DB" class="com.brframework.log.appender.DBAppender">
        <!--配置日志是否立即刷新,默认值true -->
        <immediateFlush>false</immediateFlush>
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level --- %logger{36} --- %c:%L:%m%n</pattern>
        </encoder>
    </appender>

    <!--配置输出到文件 -->
    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--配置日志输出的文件路径和名称-->
        <file>${LOG_FILE_PATH}/${APP_NAME}.log</file>
        <!--配置日志是追加还是覆盖重写,默认值true-->
        <append>true</append>
        <!--配置日志是否立即刷新,默认值true -->
        <immediateFlush>false</immediateFlush>
        <encoder>
            <!--配置日志输出格式,这里没有使用高亮显示，因为使用了也没用。 -->
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level --- %logger{36} --- %c:%L:%n%m%n</pattern>
        </encoder>
        <!--日志滚动策略，这里配置根据大小和日期自动滚动 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- 首先按照每天滚动，根据日志放到不同文件夹中，最后根据大小进行滚动分割 -->
            <fileNamePattern>${LOG_FILE_PATH}/%d{yyyy-MM-dd,aux}/${APP_NAME}-%d{yyyy-MM-dd,UTC}.%i.log</fileNamePattern>
            <!-- 每个日志文件至少 100MB,保存30天,但是所有日志占用空间最大不能超过 1GB，超过后清理较旧的日志 -->
            <maxFileSize>100MB</maxFileSize>
            <maxHistory>30</maxHistory>
            <totalSizeCap>1GB</totalSizeCap>
            <!--启动时候清理日志-->
            <cleanHistoryOnStart>false</cleanHistoryOnStart>
            <!--  可选的totalSizeCap属性控制所有存档文件的总大小。-->
            <!--  超过总大小上限时，将异步删除最旧的归档。-->
            <!--  totalSizeCap属性也需要设置maxHistory属性。 -->
            <!-- 此外，始终首先应用“最大历史记录”限制，然后应用“总大小上限”限制。-->
        </rollingPolicy>
    </appender>

    <!--配置根节点日志记录器
    <root>元素配置根记录器,它支持单个属性，即level属性。它不允许任何其他属性。
    <root>的level 可选值:TRACE，DEBUG，INFO，WARN，ERROR，ALL或OFF  -->
    <root level="INFO">
        <appender-ref ref="STDOUT" />
        <appender-ref ref="FILE" />
        <appender-ref ref="DB" />
    </root>
</configuration>